// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

// This was generated using spacetimedb cli version 1.2.0 (commit fb41e50eb73573b70eea532aeb6158eaac06fae0).

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  Identity,
  ProductType,
  ProductTypeElement,
  SubscriptionBuilderImpl,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
  type CallReducerFlags,
  type DbContext,
  type ErrorContextInterface,
  type Event,
  type EventContextInterface,
  type ReducerEventContextInterface,
  type SubscriptionEventContextInterface,
} from "@clockworklabs/spacetimedb-sdk";

// Import and reexport all reducer arg types
import { ClientConnected } from "./client_connected_reducer.ts";
export { ClientConnected };
import { IdentityDisconnected } from "./identity_disconnected_reducer.ts";
export { IdentityDisconnected };
import { MoveAllEntities } from "./move_all_entities_reducer.ts";
export { MoveAllEntities };
import { SetDirection } from "./set_direction_reducer.ts";
export { SetDirection };
import { SetName } from "./set_name_reducer.ts";
export { SetName };

// Import and reexport all table handle types
import { EntityTableHandle } from "./entity_table.ts";
export { EntityTableHandle };
import { MoveAllEntitiesTimerTableHandle } from "./move_all_entities_timer_table.ts";
export { MoveAllEntitiesTimerTableHandle };
import { PlayerTableHandle } from "./player_table.ts";
export { PlayerTableHandle };

// Import and reexport all types
import { Entity } from "./entity_type.ts";
export { Entity };
import { MoveAllEntitiesTimer } from "./move_all_entities_timer_type.ts";
export { MoveAllEntitiesTimer };
import { Player } from "./player_type.ts";
export { Player };
import { Vec2 } from "./vec_2_type.ts";
export { Vec2 };

const REMOTE_MODULE = {
  tables: {
    entity: {
      tableName: "entity",
      rowType: Entity.getTypeScriptAlgebraicType(),
      primaryKey: "entityId",
      primaryKeyInfo: {
        colName: "entityId",
        colType: Entity.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    move_all_entities_timer: {
      tableName: "move_all_entities_timer",
      rowType: MoveAllEntitiesTimer.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: MoveAllEntitiesTimer.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
    player: {
      tableName: "player",
      rowType: Player.getTypeScriptAlgebraicType(),
      primaryKey: "identity",
      primaryKeyInfo: {
        colName: "identity",
        colType: Player.getTypeScriptAlgebraicType().product.elements[0].algebraicType,
      },
    },
  },
  reducers: {
    client_connected: {
      reducerName: "client_connected",
      argsType: ClientConnected.getTypeScriptAlgebraicType(),
    },
    identity_disconnected: {
      reducerName: "identity_disconnected",
      argsType: IdentityDisconnected.getTypeScriptAlgebraicType(),
    },
    move_all_entities: {
      reducerName: "move_all_entities",
      argsType: MoveAllEntities.getTypeScriptAlgebraicType(),
    },
    set_direction: {
      reducerName: "set_direction",
      argsType: SetDirection.getTypeScriptAlgebraicType(),
    },
    set_name: {
      reducerName: "set_name",
      argsType: SetName.getTypeScriptAlgebraicType(),
    },
  },
  versionInfo: {
    cliVersion: "1.2.0",
  },
  // Constructors which are used by the DbConnectionImpl to
  // extract type information from the generated RemoteModule.
  //
  // NOTE: This is not strictly necessary for `eventContextConstructor` because
  // all we do is build a TypeScript object which we could have done inside the
  // SDK, but if in the future we wanted to create a class this would be
  // necessary because classes have methods, so we'll keep it.
  eventContextConstructor: (imp: DbConnectionImpl, event: Event<Reducer>) => {
    return {
      ...(imp as DbConnection),
      event
    }
  },
  dbViewConstructor: (imp: DbConnectionImpl) => {
    return new RemoteTables(imp);
  },
  reducersConstructor: (imp: DbConnectionImpl, setReducerFlags: SetReducerFlags) => {
    return new RemoteReducers(imp, setReducerFlags);
  },
  setReducerFlagsConstructor: () => {
    return new SetReducerFlags();
  }
}

// A type representing all the possible variants of a reducer.
export type Reducer = never
| { name: "ClientConnected", args: ClientConnected }
| { name: "IdentityDisconnected", args: IdentityDisconnected }
| { name: "MoveAllEntities", args: MoveAllEntities }
| { name: "SetDirection", args: SetDirection }
| { name: "SetName", args: SetName }
;

export class RemoteReducers {
  constructor(private connection: DbConnectionImpl, private setCallReducerFlags: SetReducerFlags) {}

  onClientConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("client_connected", callback);
  }

  removeOnClientConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("client_connected", callback);
  }

  onIdentityDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("identity_disconnected", callback);
  }

  removeOnIdentityDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("identity_disconnected", callback);
  }

  moveAllEntities(timer: MoveAllEntitiesTimer) {
    const __args = { timer };
    let __writer = new BinaryWriter(1024);
    MoveAllEntities.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("move_all_entities", __argsBuffer, this.setCallReducerFlags.moveAllEntitiesFlags);
  }

  onMoveAllEntities(callback: (ctx: ReducerEventContext, timer: MoveAllEntitiesTimer) => void) {
    this.connection.onReducer("move_all_entities", callback);
  }

  removeOnMoveAllEntities(callback: (ctx: ReducerEventContext, timer: MoveAllEntitiesTimer) => void) {
    this.connection.offReducer("move_all_entities", callback);
  }

  setDirection(direction: Vec2 | undefined) {
    const __args = { direction };
    let __writer = new BinaryWriter(1024);
    SetDirection.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("set_direction", __argsBuffer, this.setCallReducerFlags.setDirectionFlags);
  }

  onSetDirection(callback: (ctx: ReducerEventContext, direction: Vec2 | undefined) => void) {
    this.connection.onReducer("set_direction", callback);
  }

  removeOnSetDirection(callback: (ctx: ReducerEventContext, direction: Vec2 | undefined) => void) {
    this.connection.offReducer("set_direction", callback);
  }

  setName(name: string) {
    const __args = { name };
    let __writer = new BinaryWriter(1024);
    SetName.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("set_name", __argsBuffer, this.setCallReducerFlags.setNameFlags);
  }

  onSetName(callback: (ctx: ReducerEventContext, name: string) => void) {
    this.connection.onReducer("set_name", callback);
  }

  removeOnSetName(callback: (ctx: ReducerEventContext, name: string) => void) {
    this.connection.offReducer("set_name", callback);
  }

}

export class SetReducerFlags {
  moveAllEntitiesFlags: CallReducerFlags = 'FullUpdate';
  moveAllEntities(flags: CallReducerFlags) {
    this.moveAllEntitiesFlags = flags;
  }

  setDirectionFlags: CallReducerFlags = 'FullUpdate';
  setDirection(flags: CallReducerFlags) {
    this.setDirectionFlags = flags;
  }

  setNameFlags: CallReducerFlags = 'FullUpdate';
  setName(flags: CallReducerFlags) {
    this.setNameFlags = flags;
  }

}

export class RemoteTables {
  constructor(private connection: DbConnectionImpl) {}

  get entity(): EntityTableHandle {
    return new EntityTableHandle(this.connection.clientCache.getOrCreateTable<Entity>(REMOTE_MODULE.tables.entity));
  }

  get moveAllEntitiesTimer(): MoveAllEntitiesTimerTableHandle {
    return new MoveAllEntitiesTimerTableHandle(this.connection.clientCache.getOrCreateTable<MoveAllEntitiesTimer>(REMOTE_MODULE.tables.move_all_entities_timer));
  }

  get player(): PlayerTableHandle {
    return new PlayerTableHandle(this.connection.clientCache.getOrCreateTable<Player>(REMOTE_MODULE.tables.player));
  }
}

export class SubscriptionBuilder extends SubscriptionBuilderImpl<RemoteTables, RemoteReducers, SetReducerFlags> { }

export class DbConnection extends DbConnectionImpl<RemoteTables, RemoteReducers, SetReducerFlags> {
  static builder = (): DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext> => {
    return new DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext>(REMOTE_MODULE, (imp: DbConnectionImpl) => imp as DbConnection);
  }
  subscriptionBuilder = (): SubscriptionBuilder => {
    return new SubscriptionBuilder(this);
  }
}

export type EventContext = EventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type ReducerEventContext = ReducerEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type SubscriptionEventContext = SubscriptionEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
export type ErrorContext = ErrorContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
